import csv
from langchain_anthropic import ChatAnthropic
import re


def extract_tag(text, tag_name):
    # Define the regular expression pattern with the provided tag name
    pattern = fr'<{tag_name}>(.*?)</{tag_name}>'
    # Search for the pattern in the text
    match = re.search(pattern, text.lower().strip())
    if match:
        # Extract and return the content inside the specified tag
        return match.group(1)
    else:
        return None


# this function needs better be more generic , or at least forward coapatible
def claude_chat(prompt, model_name="claude-3-haiku-20240307"):
    # Initialize the model with the given model name
    model = ChatAnthropic(model=model_name)
    # Generate the response from the model
    response = model.invoke(prompt)
    # Return the response
    return response.content



# this one can always be generated by llm, not hard, specify column
def load_qna_from_csv(file_path):
    qna_list = []
    with open(file_path, mode='r', newline='') as file:
        reader = csv.DictReader(file)
        for row in reader:
            qna_list.append((int(row['id']), row['Que'], row['Ans']))
    return qna_list


# Assume this function is provided


# this one is signature, as it is a lan fun, it needs to load the prompt from file , it needs to assign variable to the prompt, and it needs to parse ret from the llm call of prompt
# as long as the prompt ret has xml tag, the parse code can be written in re by llm
def cmp_q(q1, q2):
    # Create a prompt to compare two strings using Claude model
    prompt = """
    Are the following two questions semantically similar?
    are they ask for similar answers?
    \nQuestion 1: {q1_str}\nQuestion 2: {q2_str}\n
    
    Please answer 'yes' or 'no' in 
    <answer>[yes or no]</answer>
    """.format(q1_str=q1, q2_str=q2)
    # Use Claude to get the answer
    response = claude_chat(prompt)
    ret = extract_tag(response, "answer")
    if ret == "no":
        return False
    elif ret == "yes":
        return True
    raise Exception("llm unstable")


# print(cmp_q("What is the capital of France?", "What is the capital of France?"))


def find_answer(user_question, qna_list):
    for id, question, answer in qna_list:
        if cmp_q(user_question, question):
            return True, answer
    return False, ""



# model_used = "gpt4" 
# model_used = "claude-3-haiku-20240307"
# Example usage:
# Load the QNA list from a CSV file
qna_list = load_qna_from_csv('qna.csv')

# Define the user question
user_question = "definition of AI?"

# Find the answer
found, answer = find_answer(user_question, qna_list)
if found:
    print(f"Answer: {answer}")
    print(claude_chat("""ctxt : {}, question:{}, please answer in <answer></answer>""".format(
        answer, user_question)))
else:
    print("Question not found in the QNA list.")



